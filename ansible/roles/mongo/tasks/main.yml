---
# tasks file for mongo
- name: Check if any mongo users already exist
  ansible.builtin.command: mongo --eval 'db.getUsers()' admin
  # This is a read-only operation
  changed_when: false
  ignore_errors: true
  register: mongo_check_for_mongo_users

# Ensure PyMongo is available for the community.mongodb collection's modules.
# The 3.12.3 version is the last of the PyMongo 3.x versions being tested. If
# the version pin for the community.mongodb collection is updated to 1.4.0-1.5.1
# we will need to pin to this version specifically due to how the collection
# checks the version of PyMongo available. Note that this may negatively impact
# other Python 3 packages that require newer versions of PyMongo.
- name: Install PyMongo
  ansible.builtin.pip:
    executable: /usr/bin/pip3
    name: pymongo
    version: '>=3.12.3'

- name: Create admin user in admin db (first user, no authentication)
  community.mongodb.mongodb_user:
    database: "{{ admin_db }}"
    name: "{{ admin_user }}"
    password: "{{ admin_pw }}"
    roles: "{{ admin_roles }}"
    state: present
  when: mongo_check_for_mongo_users.rc == 0

- name: Update admin user in admin db (authenticate as admin)
  community.mongodb.mongodb_user:
    database: "{{ admin_db }}"
    login_database: "{{ admin_db }}"
    login_password: "{{ admin_old_pw }}"
    login_user: "{{ admin_user }}"
    name: "{{ admin_user }}"
    password: "{{ admin_pw }}"
    roles: "{{ admin_roles }}"
    state: present
  when: mongo_check_for_mongo_users.rc != 0

- name: Update other users (authenticate as admin)
  community.mongodb.mongodb_user:
    database: "{{ lookup('aws_ssm', '/cyhy/mongo/users/' + item + '/database') }}"
    login_database: "{{ admin_db }}"
    login_password: "{{ admin_pw }}"
    login_user: "{{ admin_user }}"
    name: "{{ lookup('aws_ssm', '/cyhy/mongo/users/' + item + '/user') }}"
    password: "{{ lookup('aws_ssm', '/cyhy/mongo/users/' + item + '/password') }}"
    roles: "{{ lookup('aws_ssm', '/cyhy/mongo/users/' + item + '/roles').split(',') }}"
    state: present
  # Loop over all the users *except* for admin
  loop: "{{ non_admin_users }}"
  # ansible-lint throws a no-log-password on this task likely because
  # it is a module that needs password information and we are using a
  # loop. I would rather default to disabling logging than possibly
  # miss an edge case like error output on task failure that would leak
  # password information by disabling the rule.
  no_log: true

- name: Copy mongo configuration file
  ansible.builtin.template:
    dest: /etc/mongod.conf
    mode: 0644
    src: mongod.conf

- name: Restart mongod service to use new configuration
  ansible.builtin.service:
    name: mongod
    state: restarted
